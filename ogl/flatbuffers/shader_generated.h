// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SHADER_H_
#define FLATBUFFERS_GENERATED_SHADER_H_

#include "flatbuffers/flatbuffers.h"

struct Shader;

enum Type {
  Type_Vertex = 0,
  Type_Fragment = 1,
  Type_Geometry = 2,
  Type_Tesselation = 3,
  Type_MIN = Type_Vertex,
  Type_MAX = Type_Tesselation
};

inline const char **EnumNamesType() {
  static const char *names[] = { "Vertex", "Fragment", "Geometry", "Tesselation", nullptr };
  return names;
}

inline const char *EnumNameType(Type e) { return EnumNamesType()[static_cast<int>(e)]; }

struct Shader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_FILENAME = 8
  };
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  Type type() const { return static_cast<Type>(GetField<int8_t>(VT_TYPE, 0)); }
  const flatbuffers::String *filename() const { return GetPointer<const flatbuffers::String *>(VT_FILENAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FILENAME) &&
           verifier.Verify(filename()) &&
           verifier.EndTable();
  }
};

struct ShaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Shader::VT_NAME, name); }
  void add_type(Type type) { fbb_.AddElement<int8_t>(Shader::VT_TYPE, static_cast<int8_t>(type), 0); }
  void add_filename(flatbuffers::Offset<flatbuffers::String> filename) { fbb_.AddOffset(Shader::VT_FILENAME, filename); }
  ShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ShaderBuilder &operator=(const ShaderBuilder &);
  flatbuffers::Offset<Shader> Finish() {
    auto o = flatbuffers::Offset<Shader>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Shader> CreateShader(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   Type type = Type_Vertex,
   flatbuffers::Offset<flatbuffers::String> filename = 0) {
  ShaderBuilder builder_(_fbb);
  builder_.add_filename(filename);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const Shader *GetShader(const void *buf) { return flatbuffers::GetRoot<Shader>(buf); }

inline bool VerifyShaderBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Shader>(); }

inline void FinishShaderBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Shader> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_SHADER_H_
