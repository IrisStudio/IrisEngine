// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SHADER_H_
#define FLATBUFFERS_GENERATED_SHADER_H_

#include "flatbuffers/flatbuffers.h"

struct Shader;

struct Shader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_FILENAME = 6
  };
  const flatbuffers::String *type() const { return GetPointer<const flatbuffers::String *>(VT_TYPE); }
  const flatbuffers::String *filename() const { return GetPointer<const flatbuffers::String *>(VT_FILENAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TYPE) &&
           verifier.Verify(type()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FILENAME) &&
           verifier.Verify(filename()) &&
           verifier.EndTable();
  }
};

struct ShaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) { fbb_.AddOffset(Shader::VT_TYPE, type); }
  void add_filename(flatbuffers::Offset<flatbuffers::String> filename) { fbb_.AddOffset(Shader::VT_FILENAME, filename); }
  ShaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ShaderBuilder &operator=(const ShaderBuilder &);
  flatbuffers::Offset<Shader> Finish() {
    auto o = flatbuffers::Offset<Shader>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Shader> CreateShader(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> type = 0,
   flatbuffers::Offset<flatbuffers::String> filename = 0) {
  ShaderBuilder builder_(_fbb);
  builder_.add_filename(filename);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const Shader *GetShader(const void *buf) { return flatbuffers::GetRoot<Shader>(buf); }

inline bool VerifyShaderBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Shader>(); }

inline void FinishShaderBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Shader> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_SHADER_H_
